generator client {
    provider        = "prisma-client-js"
    output          = "./../../../../../../node_modules/@discord-clone/DiscordClone"
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Identity {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    username String @unique
    email    String @unique
    password String
    user     User   @relation(fields: [id], references: [id])

    @@map("identity")
}

model User {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    identity        Identity?      @relation
    avatarUrl       String?
    badges          String[]
    name            String
    status          UserStatus     @default(OFFLINE)
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    messages        Message[]
    serversOwned    Server[]       @relation(name: "ServerOwner")
    serversMemberOf ServerMember[]

    @@map("user")
}

model ServerMember {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    userId   String @db.ObjectId
    serverId String @db.ObjectId
    user     User   @relation(fields: [userId], references: [id])
    server   Server @relation(fields: [serverId], references: [id])

    @@unique([userId, serverId])
    @@map("server_member")
}

model Server {
    id         String         @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    iconUrl    String?
    badges     String[]
    serverType ServerType
    ownerId    String         @db.ObjectId
    owner      User           @relation(fields: [ownerId], references: [id], name: "ServerOwner")
    members    ServerMember[]
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    messages   Message[]

    @@map("server")
}

model Message {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    authorId  String   @db.ObjectId
    author    User     @relation(fields: [authorId], references: [id])
    createdAt DateTime @default(now())
    Server    Server?  @relation(fields: [serverId], references: [id])
    serverId  String?  @db.ObjectId

    @@map("message")
}

enum ServerType {
    TEXT
    VOICE
    CATEGORY
}

enum UserStatus {
    ONLINE
    OFFLINE
    DO_NOT_DISTURB
    IDLE
}
