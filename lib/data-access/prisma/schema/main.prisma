generator client {
    provider        = "prisma-client-js"
    output          = "./../../../../node_modules/@discord-clone/DiscordClone"
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Identity {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    username String @unique
    email    String @unique
    password String
    user     User   @relation(fields: [id], references: [id])

    @@map("identity")
}

model User {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    identity  Identity?  @relation
    avatarUrl String?
    badges    String[]
    name      String
    status    UserStatus @default(OFFLINE)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    role      UserRole   @default(USER)

    serversOwned     Server[]        @relation(name: "ServerOwner")
    serversMemberOf  ServerMember[]
    friends          Friend[]        @relation("UserFriends")
    friendOf         Friend[]        @relation("UserFriendsReverse")
    sentMessages     DirectMessage[] @relation("SenderRelation")
    receivedMessages DirectMessage[] @relation("ReceiverRelation")

    ServerMessage ServerMessage[]
    DirectMessage DirectMessage[]

    @@map("user")
}

model Friend {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    userId    String       @db.ObjectId
    friendId  String       @db.ObjectId
    status    FriendStatus @default(PENDING)
    user      User         @relation("UserFriends", fields: [userId], references: [id])
    friend    User         @relation("UserFriendsReverse", fields: [friendId], references: [id])
    createdAt DateTime     @default(now())

    @@unique([userId, friendId])
    @@index([userId])
    @@index([friendId])
    @@map("friend")
}

model ServerMember {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    userId   String @db.ObjectId
    serverId String @db.ObjectId
    user     User   @relation(fields: [userId], references: [id])
    server   Server @relation(fields: [serverId], references: [id])

    @@unique([userId, serverId])
    @@index([userId])
    @@index([serverId])
    @@map("server_member")
}

model Server {
    id         String          @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    iconUrl    String?
    badges     String[]
    serverType ServerType
    ownerId    String          @db.ObjectId
    owner      User            @relation(fields: [ownerId], references: [id], name: "ServerOwner")
    members    ServerMember[]
    messages   ServerMessage[]
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt

    @@map("server")
}

model ServerMessage {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    authorId  String    @db.ObjectId
    author    User      @relation(fields: [authorId], references: [id])
    serverId  String?   @db.ObjectId
    server    Server?   @relation(fields: [serverId], references: [id])
    createdAt DateTime  @default(now())
    editedAt  DateTime?

    @@index([serverId])
    @@map("server_message")
}

model DirectMessage {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    content    String
    senderId   String    @db.ObjectId
    receiverId String    @db.ObjectId
    sender     User      @relation("SenderRelation", fields: [senderId], references: [id])
    receiver   User      @relation("ReceiverRelation", fields: [receiverId], references: [id])
    createdAt  DateTime  @default(now())
    editedAt   DateTime?
    readAt     DateTime?
    User       User?     @relation(fields: [userId], references: [id])
    userId     String?   @db.ObjectId

    @@unique([senderId, receiverId, createdAt])
    @@index([senderId])
    @@index([receiverId])
    @@map("direct_message")
}

enum UserRole {
    USER
    ADMIN
}

enum ServerType {
    TEXT
    VOICE
    CATEGORY
}

enum UserStatus {
    ONLINE
    OFFLINE
    DO_NOT_DISTURB
    IDLE
}

enum FriendStatus {
    PENDING
    ACCEPTED
    REJECTED
}
