generator client {
    provider        = "prisma-client-js"
    output          = "./../../../../node_modules/@discord-clone/DiscordClone"
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Identity {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    username String @unique
    email    String @unique
    password String

    tokens Token[]

    user User @relation(fields: [id], references: [id])

    @@map("identity")
}

model Token {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    refreshToken String? @unique
    identityId   String? @db.ObjectId

    Identity Identity? @relation(fields: [identityId], references: [id])

    @@map("token")
}

model User {
    id                String     @id @default(auto()) @map("_id") @db.ObjectId
    identity          Identity?  @relation
    avatarUrl         String?
    badges            String[]
    name              String
    personalChannelId String?    @db.ObjectId
    status            UserStatus @default(OFFLINE)
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
    role              UserRole   @default(USER)

    serversMemberOf ServerMember[]
    permissions     ServerPermission[]

    serversOwned    Server[]       @relation(name: "ServerOwner")
    friends         Relationship[] @relation("UserRelationships")
    friendOf        Relationship[] @relation("UserRelationshipsReverse")
    personalChannel Channel?       @relation
    messages        Message[]      @relation("UserMessages")

    @@map("user")
}

model Channel {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    type      ChannelType
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    serverId  String?     @db.ObjectId
    ownerId   String?     @unique @db.ObjectId

    server   Server?   @relation(fields: [serverId], references: [id])
    owner    User?     @relation(fields: [ownerId], references: [id]) // Sử dụng ownerId thay vì trực tiếp liên kết qua personalChannelId
    messages Message[] @relation("ChannelMessages")

    @@map("channel")
}

model Relationship {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    userId    String       @db.ObjectId
    friendId  String       @db.ObjectId
    status    FriendStatus @default(PENDING)
    user      User         @relation("UserRelationships", fields: [userId], references: [id])
    friend    User         @relation("UserRelationshipsReverse", fields: [friendId], references: [id])
    createdAt DateTime     @default(now())

    @@unique([userId, friendId])
    @@index([userId])
    @@index([friendId])
    @@map("relationships")
}

model ServerMember {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    userId   String @db.ObjectId
    serverId String @db.ObjectId
    user     User   @relation(fields: [userId], references: [id])
    server   Server @relation(fields: [serverId], references: [id])

    @@unique([userId, serverId])
    @@index([userId])
    @@index([serverId])
    @@map("server_member")
}

model Server {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    iconUrl   String?
    badges    String[]
    ownerId   String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members     ServerMember[]
    channels    Channel[]
    permissions ServerPermission[]

    owner User @relation(fields: [ownerId], references: [id], name: "ServerOwner")

    @@map("server")
}

model Message {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    senderId  String    @db.ObjectId
    channelId String    @db.ObjectId
    createdAt DateTime  @default(now())
    editedAt  DateTime?
    readAt    DateTime?

    sender  User    @relation("UserMessages", fields: [senderId], references: [id])
    channel Channel @relation("ChannelMessages", fields: [channelId], references: [id])

    @@index([senderId])
    @@index([channelId])
    @@map("message")
}

model ServerPermission {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    apiPath     String
    method      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String   @unique @db.ObjectId
    serverId    String   @unique @db.ObjectId

    user   User   @relation(fields: [userId], references: [id])
    server Server @relation(fields: [serverId], references: [id])

    @@map("server_permission")
}

enum UserRole {
    USER
    ADMIN
}

enum UserStatus {
    ONLINE
    OFFLINE
    DO_NOT_DISTURB
    IDLE
}

enum FriendStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum ChannelType {
    PERSONAL
    CHAT
    VOICE
}
